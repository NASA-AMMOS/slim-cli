# SLIM CLI Prompts Configuration
#
# This file defines all AI prompts used throughout SLIM CLI.
# Context is optional at any level and cascades from parent to child.
# If present, all applicable context levels are combined and passed to the LLM.
#
# Repository context can also be defined at any level to control what
# repository information is included in AI prompts. Child settings override parent settings.

# Global context for all SLIM practices (optional)
context: "You are a software best practice assistant helping to improve software projects."

# Global repository context (applies to all unless overridden)
repository_context:
  categories: ["documentation"]
  max_characters: 10000
  include_patterns: ["README*", "*.md", "CHANGELOG*", "LICENSE*"]
  exclude_patterns: ["*.log", "node_modules/", ".git/", "__pycache__/", "*.pyc"]

# Standard practices using template-based approach
standard_practices:
  context: "You are applying best practices to improve software governance and documentation."

  # Governance practices
  governance:
    prompt: "Fill out all blanks in the template below that start with INSERT. Use the provided context information to fill the blanks. Return the template with filled out values."

  # Documentation practices
  readme:
    context: "You are a technical documentation specialist helping to create a README file. Format using markdown and ensure novice and expert users can read the documentation."
    prompt: "Fill out ONLY the placeholders that are enclosed in square brackets and contain the word INSERT (e.g., [INSERT YOUR REPO / PROJ NAME HERE]). Use the provided repository context to determine appropriate values. Do NOT modify any other parts of the template, including badges, links, or formatting. Return the complete template with only the INSERT placeholders replaced."
    repository_context:
      categories: ["documentation", "structure"]
      max_characters: 8000
      include_patterns: ["README*", "*.md", "package.json", "setup.py", "pyproject.toml"]

  # Testing documentation
  testing-plan:
    context: "Document existing testing practices and coverage accurately based on what actually exists in the repository."
    prompt: "Within the provided testing template, only fill out the sections that plausibly have existing tests to fill out based on the directory listing provided (do not make up tests that do not exist). Return the template with filled out values."

# Documentation generation practices
docgen:
  context: "You are a technical documentation specialist helping to create comprehensive software documentation. Format using markdown and fix any errors for Docusaurus website compatibility."

  overview:
    context: "Create an engaging project overview that captures the essence and value proposition of the project."
    prompt: "Enhance this project overview to be more comprehensive and user-friendly while maintaining accuracy. Add clear sections for features, use cases, and key concepts if they're not already present."

  installation:
    context: "Provide clear, step-by-step installation instructions that users can follow successfully."
    prompt: "Improve this installation guide by adding clear prerequisites, troubleshooting tips, and platform-specific instructions while maintaining accuracy."

  api:
    context: "Document APIs with clarity, comprehensive examples, and detailed parameter descriptions."
    prompt: "Enhance this API documentation by adding more detailed descriptions, usage examples, and parameter explanations while maintaining technical accuracy."

  development:
    context: "Guide developers through the development workflow, project structure, and best practices."
    prompt: "Improve this development guide by adding more context, best practices, and workflow descriptions while maintaining accuracy."

  contributing:
    context: "Create welcoming and clear contributing guidelines that encourage community participation."
    prompt: "Enhance these contributing guidelines by adding more specific examples, workflow descriptions, and best practices while maintaining accuracy."

  changelog:
    context: "Document project changes, releases, and version history clearly and comprehensively."
    prompt: "Enhance this changelog by adding clear version histories, release notes, and change descriptions while maintaining chronological accuracy."

  deployment:
    context: "Provide clear deployment instructions and operational guidance for the project."
    prompt: "Improve this deployment guide by adding detailed deployment steps, environment configurations, and operational best practices while maintaining accuracy."

  architecture:
    context: "Document system architecture, design patterns, and technical implementation details."
    prompt: "Enhance this architecture documentation by adding clear system diagrams, design patterns, and technical implementation details while maintaining accuracy."

  testing:
    context: "Document testing strategies, test suites, and quality assurance practices."
    prompt: "Improve this testing documentation by adding comprehensive testing strategies, coverage information, and testing best practices while maintaining accuracy."

  security:
    context: "Document security practices, vulnerability management, and security considerations."
    prompt: "Enhance this security documentation by adding security best practices, vulnerability management, and security considerations while maintaining accuracy."

  guides:
    context: "Create comprehensive user and developer guides that provide step-by-step instructions."
    prompt: "Improve these guides by adding more detailed step-by-step instructions, examples, and troubleshooting information while maintaining accuracy."

  # Site-specific enhancements for React components
  index_js_update:
    context: "Update React component content while preserving the existing structure completely."
    prompt: "Using the provided overview.md content as context, update ONLY the text content in this React component (index.js) while preserving its existing structure completely."

  homepage_features_update:
    context: "Update feature descriptions in React components based on documentation content."
    prompt: "Using the provided overview.md content as context, update ONLY the feature descriptions in this React component while preserving its structure."

  docusaurus_config_update:
    context: "Update Docusaurus configuration based on project information."
    prompt: "Using the provided overview.md content as context, update ONLY the title and tagline in this docusaurus.config.js file."

# Documentation website generation practices
docs-website:
  context: "You are creating comprehensive documentation for a software project. Generate professional, detailed content that accurately reflects the project's capabilities and structure."
  
  generate_documentation:
    prompt: |
      You are enhancing documentation for a software project. Your task is to replace [INSERT_CONTENT] markers with appropriate content.
      
      CRITICAL INSTRUCTIONS:
      1. PRESERVE the existing YAML front matter (lines starting with --- at the top) EXACTLY as provided
      2. PRESERVE all existing headings, structure, and non-[INSERT_CONTENT] text
      3. ONLY replace [INSERT_CONTENT] markers with relevant documentation content
      4. Return ONLY the enhanced file content - NO conversation text, explanations, or meta-commentary
      5. Do NOT include "### User:" or "### Assistant:" or any chat-like formatting
      6. Replace {{PROJECT_NAME}} with the actual project name from the repository context
      
      Based on the repository analysis provided:
      - Project type and technology stack
      - Directory structure and key features
      - Existing documentation patterns
      
      For each [INSERT_CONTENT] marker:
      - Generate substantial, professional content appropriate for that section
      - Consider the file name and surrounding headings for context
      - Include relevant examples, commands, and best practices
      - Make content specific to the actual project, not generic templates
      
      OUTPUT FORMAT: Return the complete file with [INSERT_CONTENT] markers replaced and {{PROJECT_NAME}} substituted, maintaining all original formatting and structure.

# Security practices
secrets_detection:
  # No AI prompts needed - this practice uses rule-based detection
  context: "Security-focused practice for detecting and preventing secrets in code repositories."
# Future practices can be added here following the same pattern
# Each practice type can define:
# - context (optional): Inherits from parent levels
# - prompt: The main instruction for the AI
# - Additional nested levels with their own context/prompt pairs
